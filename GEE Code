//Loading FeatureCollection with shapes you want forestloss from
var Tropical = ee.FeatureCollection('shapefile/feature');

//loading GFC Image from hansen
var gfcImage = ee.Image("UMD/hansen/global_forest_change_2018_v1_6");



var forest2000 = gfcImage.select('treecover2000').divide(100);//Percentage treecover start
var areaImage2000 = forest2000.multiply(ee.Image.pixelArea()); //Start treecover precentage in m^2
var lossImage = gfcImage.select('loss'); //Loss in pixel
var lossYear = gfcImage.select('lossyear');//Which year loss occured
var gainImage = gfcImage.select('gain'); //Gain in pixel
var totalLoss2012 = lossImage.multiply(ee.Image.pixelArea()); //Loss in m^2

// Get all pixels from 2000 where loss occured.
// If pixel had 70% forest cover in 2000 we assume that 70% was lost in 2012
var maskLossArea = forest2000.mask(lossImage).multiply(ee.Image.pixelArea());

// Most pessimistic approach - always assume 100% forest loss.
var lossImageArea = lossImage.multiply(ee.Image.pixelArea());


// Find gain-only pixels. Reasoning is that if both loss and gain occurs it's
// probably not suitable habitat
var gainOnly = gainImage.and(lossImage.not());
var gainOnlyArea = gainOnly.multiply(ee.Image.pixelArea());

/* We create an array in which we will store the following sequence:
- First element - Name, e.g. 'tree area'.
- Second element - Name of a band as it appears on GFC. Needed to retrieve results.
- Third element - The image itself. */

var areas = [];
areas.push(['Tree area 2000', 'treecover2000', areaImage2000]);
areas.push(['Forest loss 2001 - 2018', 'treecover2000', maskLossArea]);
areas.push(['Forest loss 2001 - 2018 pessimistic&', 'loss', lossImageArea]);
areas.push(['Gain forest', 'gain', gainOnlyArea]);

for (var year = 1; year <= 18; year += 1)
{
areas.push(['Loss area 2000' + year.toString(),
'treecover2000',
forest2000.mask(lossYear.eq(year)).multiply(ee.Image.pixelArea())]);
}

// 'selectors' are a way of informing GEE which data we want exported. If none are specified
// complete data set is exported, together with columns which are not relevant.
var selectors = [];
for (var idx = 0; idx < areas.length; idx += 1)
{
selectors.push(areas[idx][0]);
}
selectors.push('name'); //Choosing the 'name' column from the geometries as name in the shapefile

var scale = 30; // Scale at which calculations should be run. GFC is 30m
var maxPixels = 1e12; // 10^12 - above that number of pixels GEE will use bestEffort flag

var bestEffort = false; // Change scale if too many pixels. Unlikely in this case.
var reducer = ee.Reducer.sum(); // This reducer will sum up all pixels

//Get the geometries from the FeatureCollection
var collection = ee.FeatureCollection(Tropical, 'geometry');

// For every such geometry...
var areasComputeObject = collection.map(function f(e) {
// Go through each metric we pushed to the 'areas' array...
for (var idx = 0; idx < areas.length; idx++)
{
e=e.set(areas[idx][0], // Name of the metric (e.g. Tree area 2000)
ee.Number(areas[idx][2].reduceRegion({ // [2] is the image itself - perform 'reduce'; on it
reducer: reducer, // our reducer will sum all pixels
scale: scale, // at this scale
maxPixels: maxPixels,
geometry : e.geometry(),
bestEffort: bestEffort

}).get(areas[idx][1])).divide(1e6)); // [1] is name from GFC. We divide by 1000^2 to get km^2
  
}
return e;
});


// We select subset of available columns. "false"; indicate that geometry should not be exported.
areasComputeObject = areasComputeObject.select(selectors, null, false);

// "export" will create an export task. No calculations are fired until one presses a button.
// Since it is a loop a number of export tasks is created.
var taskParams = { 'driveFolder' : "", fileFormat : 'CSV' };
Export.table(areasComputeObject, 'table', taskParams);
